random.txt

This topic contains parts of the help that has not yet been move into a topic.


==============================================================================
Evaluate code

To evaluate code snippets press: c c p. If selection is active the selected 
code will be executed. (Be aware the selection needs to contain valid code to 
evaluate succesfully.)

If nothing is selected the smallest form containing the cursor will be 
evaluated.

Examples:

    (+ 1 2 (* 3 4)) 

Place the cursor on "1" and press c p p. The result will be 15.

Place the cursor on "3" and press c p p. Onlty the inner form will be 
evaluated with the result 12.

This priciple allows one to evaluate "test" snippets within comment tags, 
like:

    (comment (+ 1 2 (* 3 4)))


==============================================================================
Modify keybindings

Below is an example of how to define or redefine a keybinding for an already  
existing mode.

It has been written with all details to make it clear how the parts are 
assembled.

Evaluate the code by selecting everything (of the code) and type c p p. After 
 that pressing C-t (Ctrl+T) the cursor will move 10 times to the right. Try  
it. 

    (ns user
      (:require [liq.editor :as editor]
                [liq.buffer :as buffer]))

    (defn move10
      [buf]
      (buffer/right buf 10))

    (defn move10action
      []
      (editor/apply-to-buffer move10))

    (editor/add-key-bindings :help-mode :normal {"C-t" move10action})


==============================================================================
Modify commands

    (ns user
      (:require [liq.editor :as editor]
                [liq.buffer :as buffer]))

    (defn move10
      [buf]
      (buffer/right buf 10))

    (defn move10action
      []
      (editor/apply-to-buffer move10))

    (swap! editor/state assoc-in [:liq.editor/commands :move10] move10action)

Now type :move10 in normal mode. Then ENTER. The cursor will move 10 times to 
the right 

The command can also be used for keybinding, like this:

    (editor/add-key-bindings :help-mode :normal {"C-t" :move10})

Example with command taking parameters:

    (ns user
      (:require [liq.editor :as editor]
                [liq.buffer :as buffer]))

    (defn move-n
      [buf n]
      (buffer/right buf n))

    (defn move-n-action
      [& args]
      (let [n (Integer/parseInt (or (first args) "10"))]
        (editor/apply-to-buffer #(move-n % n))))

    (swap! editor/state assoc-in [:liq.editor/commands :moven] move-n-action)

Try it by typing ":moven 20" in normal mode


==============================================================================
Major Modes

Modes have the form

    {:insert {}
     :normal {}
     :visual {}
     :syntax {}
     :init (fn [])}

Modes are "saved" in the editor state, like this:

    (editor/add-mode :my-mode mode)

or

    (swap! editor/state update ::editor/modes assoc :my-mode mode)

Major modes are associated with buffers through the ::buffer/major-modes
keyword in the buffer. It contains a list of major modes:

    ::buffer/major-modes (list :mode1 :mode2)

It defines a priority of modes to choose from when resolving a key press.

If for example the mode is :normal and a key like "f3" is pressed, the editor
will first look for a function in :normal in :mode1 defined for "f3". If there
is no hit, it will look in :mode2 etc.

Syntax highligthing will choosen from the first mode in the list containing a
:syntax keyword. This allows one to add a mode only redefining parts of the
mode, like keybindings and not necessarily syntax highlighting and visa versa.

See syntax-highlighting.txt for more details around syntax highlighting.

See keybindings.txt for more details around keybindings.


==============================================================================
Cool stuff


??? C-i : Navigate headlines and definitions














